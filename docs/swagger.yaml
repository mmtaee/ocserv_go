definitions:
  models.OcservUser:
    properties:
      created_at:
        type: integer
      default_traffic:
        type: number
      expire_at:
        type: integer
      group:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      is_online:
        type: boolean
      password:
        type: string
      rx:
        type: number
      traffic_type:
        $ref: '#/definitions/models.ServiceTypeEnum'
      tx:
        type: number
      updated_at:
        type: integer
      username:
        type: string
    type: object
  models.ServiceTypeEnum:
    enum:
    - FREE
    - MONTHLY
    - TOTALLY
    type: string
    x-enum-comments:
      FREE: The user uses the service without restrictions
      MONTHLY: The user uses the service with a monthly usage limit
      TOTALLY: The user uses the service with a limited Rx-TX
    x-enum-varnames:
    - FREE
    - MONTHLY
    - TOTALLY
  models.Site:
    properties:
      captcha_secret_key:
        type: string
      captcha_site_key:
        type: string
      default_traffic:
        type: number
      id:
        type: integer
    type: object
  ocserv_group.CreateOcservGroupData:
    properties:
      config:
        $ref: '#/definitions/ocserv_group.GroupConfig'
      group_name:
        type: string
    required:
    - group_name
    type: object
  ocserv_group.GroupConfig:
    properties:
      dns:
        items:
          type: string
        type: array
      dpd:
        type: integer
      idle_timeout:
        type: integer
      ipv4_network:
        type: string
      keepalive:
        type: integer
      max_same_clients:
        type: integer
      mobile_dpd:
        type: integer
      mobile_idle_timeout:
        type: integer
      mtu:
        type: integer
      no_routes:
        items:
          type: string
        type: array
      no_udp:
        type: boolean
      restrict_user_to_routes:
        type: boolean
      routes:
        items:
          type: string
        type: array
      rx_data_per_sec:
        type: integer
      session_timeout:
        type: integer
      tunnel_all_dns:
        type: boolean
      tx_data_per_sec:
        type: integer
    type: object
  ocserv_user.CreateOcservUserBody:
    properties:
      default_traffic:
        type: number
      expire_at:
        type: integer
      group:
        type: string
      is_active:
        enum:
        - true
        - false
        type: boolean
      password:
        maxLength: 12
        minLength: 4
        type: string
      traffic_type:
        allOf:
        - $ref: '#/definitions/models.ServiceTypeEnum'
        enum:
        - FREE
        - MONTHLY
        - TOTALLY
      username:
        maxLength: 8
        minLength: 4
        type: string
    required:
    - default_traffic
    - group
    - traffic_type
    - username
    type: object
  ocserv_user.UpdateOcservUserBody:
    properties:
      default_traffic:
        type: number
      expire_at:
        type: integer
      group:
        type: string
      is_active:
        enum:
        - true
        - false
        type: boolean
      password:
        maxLength: 12
        minLength: 4
        type: string
      traffic_type:
        allOf:
        - $ref: '#/definitions/models.ServiceTypeEnum'
        enum:
        - FREE
        - MONTHLY
        - TOTALLY
    type: object
  site.CreateSiteBody:
    properties:
      captcha_secret_key:
        type: string
      captcha_site_key:
        type: string
      default_traffic:
        type: number
    required:
    - default_traffic
    type: object
  site.UpdateSiteBody:
    properties:
      captcha_secret_key:
        type: string
      captcha_site_key:
        type: string
      default_traffic:
        type: number
    type: object
  user.CreateLoginBody:
    properties:
      password:
        type: string
      remember_me:
        type: boolean
      username:
        type: string
    required:
    - password
    - username
    type: object
  user.CreateUserBody:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  user.CreateUserResponse:
    properties:
      id:
        type: integer
      is_admin:
        type: boolean
      username:
        type: string
    required:
    - username
    type: object
  user.LoginResponse:
    properties:
      expire_at:
        type: integer
      token:
        type: string
    type: object
  user.UpdateStaffPasswordBody:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  user.UpdateUserPasswordBody:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    required:
    - current_password
    - new_password
    type: object
info:
  contact: {}
paths:
  /api/v1/ocserv/groups/:
    get:
      description: List Ocserv Group
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: List Ocserv Group
      tags:
      - ocserv group
    post:
      description: Create Ocserv Group
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request Body
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/ocserv_group.CreateOcservGroupData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Create Ocserv Group
      tags:
      - ocserv group
  /api/v1/ocserv/groups/:name/:
    delete:
      description: Delete Ocserv Group
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      summary: Delete Ocserv Group
      tags:
      - ocserv group
    patch:
      description: Update Ocserv Group
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request Body
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/ocserv_group.GroupConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update Ocserv Group
      tags:
      - ocserv group
  /api/v1/ocserv/users/:
    post:
      description: Create Ocserv User
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request Body
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/ocserv_user.CreateOcservUserBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OcservUser'
        "400":
          description: Bad Request
      summary: Create Ocserv User
      tags:
      - ocserv user
  /api/v1/ocserv/users/:id/:
    delete:
      description: Delete ocserv user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Delete ocserv user
      tags:
      - ocserv user
    patch:
      description: Update Ocserv User
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request Body
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/ocserv_user.UpdateOcservUserBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OcservUser'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Update Ocserv User
      tags:
      - ocserv user
  /api/v1/ocserv/users/:id/disconnect/:
    post:
      description: Disconnect ocserv user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Disconnect ocserv user
      tags:
      - ocserv user
  /api/v1/site/:
    get:
      description: Get site configuration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Site'
        "400":
          description: Bad Request
      summary: Get site configuration
      tags:
      - site
    patch:
      description: Update site configuration
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request Body
        in: body
        name: site
        schema:
          $ref: '#/definitions/site.UpdateSiteBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Site'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Update site configuration
      tags:
      - site
    post:
      description: Post site configuration
      parameters:
      - description: Request Body
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/site.CreateSiteBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Site'
        "400":
          description: Bad Request
      summary: Post site configuration
      tags:
      - site
  /api/v1/users/:
    post:
      description: Set up an admin or superuser during site initialization
      parameters:
      - description: Request Body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.CreateUserResponse'
        "400":
          description: Bad Request
      summary: Set up an admin user
      tags:
      - user
  /api/v1/users/login/:
    post:
      description: Login admin or staff user to get token
      parameters:
      - description: Request Body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateLoginBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "400":
          description: Bad Request
      summary: Login
      tags:
      - user
  /api/v1/users/password/:
    patch:
      description: Update admin or staff user password (self change)
      parameters:
      - description: Request Body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserPasswordBody'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
      summary: Update Password
      tags:
      - user
  /api/v1/users/staffs/:
    post:
      description: Create staff user
      parameters:
      - description: Request Body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserBody'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.CreateUserResponse'
        "400":
          description: Bad Request
        "403":
          description: Admin Permission required
      summary: Create staff user
      tags:
      - user
  /api/v1/users/staffs/:id/:
    delete:
      description: Delete staff user(by admin)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Admin Permission required
        "404":
          description: Not Found
      summary: Delete staff
      tags:
      - user
  /api/v1/users/staffs/:id/password/:
    patch:
      description: Update staff user password(by admin)
      parameters:
      - description: Request Body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateStaffPasswordBody'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
        "403":
          description: Admin Permission required
        "404":
          description: User not found
      summary: Update staff password
      tags:
      - user
swagger: "2.0"
